trigger: none

pool: Azure Pipelines

parameters:
  - name: runInit
    type: boolean
    default: true
  - name: runValidate
    type: boolean
    default: true
  - name: runFmt
    type: boolean
    default: true
  - name: runPlan
    type: boolean
    default: true

variables:
  working_path: '$(System.DefaultWorkingDirectory)/Infra_dev'
  wif: 'workload_identity_federation_connection'

steps:

- task: TerraformInstaller@1
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: 'latest'

- task: TerraformTask@5
  displayName: 'Terraform init'
  condition: eq('${{ parameters.runInit }}', true)
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(working_path)'
    backendServiceArm: '$(wif)'
    backendAzureRmResourceGroupName: 'rg-pipeline'
    backendAzureRmStorageAccountName: 'stgpipeline'
    backendAzureRmContainerName: 'contpipeline'
    backendAzureRmKey: 'pipeline.tfstate'

- task: TerraformTask@5
  displayName: 'Terraform Validate'
  condition: eq('${{ parameters.runValidate }}', true)
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(working_path)'

- task: TerraformTask@5
  displayName: 'Terraform fmt'
  condition: eq('${{ parameters.runFmt }}', true)
  inputs:
    provider: 'azurerm'
    command: 'custom'
    workingDirectory: '$(working_path)'
    outputTo: 'console'
    customCommand: 'fmt'
    environmentServiceNameAzureRM: '$(wif)'

- task: TerraformTask@5
  displayName: 'Terraform plan'
  condition: eq('${{ parameters.runPlan }}', true)
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(working_path)'
    environmentServiceNameAzureRM: '$(wif)'
