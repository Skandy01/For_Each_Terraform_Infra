# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool: Azure Pipelines

variables:

  working_path: '$(System.DefaultWorkingDirectory)/Infra_dev'
  wif : 'workload_identity_federation_connection'

steps:

- task: TerraformInstaller@1
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: 'latest'

- task: TerraformTask@5
  displayName : 'Terraform init'

  inputs:

    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(working_path)'
    backendServiceArm: '$(wif)'
    backendAzureRmResourceGroupName: 'rg-pipeline'
    backendAzureRmStorageAccountName: 'stgpipeline'
    backendAzureRmContainerName: 'contpipeline'
    backendAzureRmKey: 'pipeline.tfstate'

- task: TerraformTask@5
  displayName : 'Terraform Validate'
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(working_path)'



- task: TerraformTask@5
  displayName: 'Terraform fmt'
  inputs:
    provider: 'azurerm'
    command: 'custom'
    workingDirectory: '$(working_path)'
    outputTo: 'console'
    customCommand: 'fmt'
    environmentServiceNameAzureRM: '$(wif)'


- task: TerraformTask@5
  displayName: 'Terraform plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(working_path)'
    environmentServiceNameAzureRM: '$(wif)'
    






